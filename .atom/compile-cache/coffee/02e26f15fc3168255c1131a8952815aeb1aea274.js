(function() {
  var Color, Palette;

  require('./helpers/matchers');

  Color = require('../lib/color');

  Palette = require('../lib/palette');

  describe('Palette', function() {
    var colors, createVar, palette, ref;
    ref = [], palette = ref[0], colors = ref[1];
    createVar = function(name, color, path, line) {
      return {
        name: name,
        color: color,
        path: path,
        line: line
      };
    };
    beforeEach(function() {
      colors = [createVar('red', new Color('#ff0000'), 'file.styl', 0), createVar('green', new Color('#00ff00'), 'file.styl', 1), createVar('blue', new Color('#0000ff'), 'file.styl', 2), createVar('redCopy', new Color('#ff0000'), 'file.styl', 3), createVar('red', new Color('#ff0000'), 'file2.styl', 0)];
      return palette = new Palette(colors);
    });
    describe('::getColorsCount', function() {
      return it('returns the number of colors in the palette', function() {
        return expect(palette.getColorsCount()).toEqual(5);
      });
    });
    describe('::getColorsNames', function() {
      return it('returns the names of the colors in the palette', function() {
        return expect(palette.getColorsNames()).toEqual(['red', 'green', 'blue', 'redCopy', 'red']);
      });
    });
    describe('::sortedByName', function() {
      return it('returns the colors and names sorted by name', function() {
        return expect(palette.sortedByName()).toEqual([colors[2], colors[1], colors[0], colors[4], colors[3]]);
      });
    });
    return describe('::sortedByColor', function() {
      return it('returns the colors and names sorted by colors', function() {
        return expect(palette.sortedByColor()).toEqual([colors[0], colors[3], colors[4], colors[1], colors[2]]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvZWRzYW5kb3JmLy5hdG9tL3BhY2thZ2VzL3BpZ21lbnRzL3NwZWMvcGFsZXR0ZS1zcGVjLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUE7O0VBQUEsT0FBQSxDQUFRLG9CQUFSOztFQUVBLEtBQUEsR0FBUSxPQUFBLENBQVEsY0FBUjs7RUFDUixPQUFBLEdBQVUsT0FBQSxDQUFRLGdCQUFSOztFQUVWLFFBQUEsQ0FBUyxTQUFULEVBQW9CLFNBQUE7QUFDbEIsUUFBQTtJQUFBLE1BQW9CLEVBQXBCLEVBQUMsZ0JBQUQsRUFBVTtJQUVWLFNBQUEsR0FBWSxTQUFDLElBQUQsRUFBTyxLQUFQLEVBQWMsSUFBZCxFQUFvQixJQUFwQjthQUNWO1FBQUMsTUFBQSxJQUFEO1FBQU8sT0FBQSxLQUFQO1FBQWMsTUFBQSxJQUFkO1FBQW9CLE1BQUEsSUFBcEI7O0lBRFU7SUFHWixVQUFBLENBQVcsU0FBQTtNQUNULE1BQUEsR0FBUyxDQUNQLFNBQUEsQ0FBVSxLQUFWLEVBQWlCLElBQUksS0FBSixDQUFVLFNBQVYsQ0FBakIsRUFBdUMsV0FBdkMsRUFBb0QsQ0FBcEQsQ0FETyxFQUVQLFNBQUEsQ0FBVSxPQUFWLEVBQW1CLElBQUksS0FBSixDQUFVLFNBQVYsQ0FBbkIsRUFBeUMsV0FBekMsRUFBc0QsQ0FBdEQsQ0FGTyxFQUdQLFNBQUEsQ0FBVSxNQUFWLEVBQWtCLElBQUksS0FBSixDQUFVLFNBQVYsQ0FBbEIsRUFBd0MsV0FBeEMsRUFBcUQsQ0FBckQsQ0FITyxFQUlQLFNBQUEsQ0FBVSxTQUFWLEVBQXFCLElBQUksS0FBSixDQUFVLFNBQVYsQ0FBckIsRUFBMkMsV0FBM0MsRUFBd0QsQ0FBeEQsQ0FKTyxFQUtQLFNBQUEsQ0FBVSxLQUFWLEVBQWlCLElBQUksS0FBSixDQUFVLFNBQVYsQ0FBakIsRUFBdUMsWUFBdkMsRUFBcUQsQ0FBckQsQ0FMTzthQU9ULE9BQUEsR0FBVSxJQUFJLE9BQUosQ0FBWSxNQUFaO0lBUkQsQ0FBWDtJQVVBLFFBQUEsQ0FBUyxrQkFBVCxFQUE2QixTQUFBO2FBQzNCLEVBQUEsQ0FBRyw2Q0FBSCxFQUFrRCxTQUFBO2VBQ2hELE1BQUEsQ0FBTyxPQUFPLENBQUMsY0FBUixDQUFBLENBQVAsQ0FBZ0MsQ0FBQyxPQUFqQyxDQUF5QyxDQUF6QztNQURnRCxDQUFsRDtJQUQyQixDQUE3QjtJQUlBLFFBQUEsQ0FBUyxrQkFBVCxFQUE2QixTQUFBO2FBQzNCLEVBQUEsQ0FBRyxnREFBSCxFQUFxRCxTQUFBO2VBQ25ELE1BQUEsQ0FBTyxPQUFPLENBQUMsY0FBUixDQUFBLENBQVAsQ0FBZ0MsQ0FBQyxPQUFqQyxDQUF5QyxDQUN2QyxLQUR1QyxFQUV2QyxPQUZ1QyxFQUd2QyxNQUh1QyxFQUl2QyxTQUp1QyxFQUt2QyxLQUx1QyxDQUF6QztNQURtRCxDQUFyRDtJQUQyQixDQUE3QjtJQVVBLFFBQUEsQ0FBUyxnQkFBVCxFQUEyQixTQUFBO2FBQ3pCLEVBQUEsQ0FBRyw2Q0FBSCxFQUFrRCxTQUFBO2VBQ2hELE1BQUEsQ0FBTyxPQUFPLENBQUMsWUFBUixDQUFBLENBQVAsQ0FBOEIsQ0FBQyxPQUEvQixDQUF1QyxDQUNyQyxNQUFPLENBQUEsQ0FBQSxDQUQ4QixFQUVyQyxNQUFPLENBQUEsQ0FBQSxDQUY4QixFQUdyQyxNQUFPLENBQUEsQ0FBQSxDQUg4QixFQUlyQyxNQUFPLENBQUEsQ0FBQSxDQUo4QixFQUtyQyxNQUFPLENBQUEsQ0FBQSxDQUw4QixDQUF2QztNQURnRCxDQUFsRDtJQUR5QixDQUEzQjtXQVVBLFFBQUEsQ0FBUyxpQkFBVCxFQUE0QixTQUFBO2FBQzFCLEVBQUEsQ0FBRywrQ0FBSCxFQUFvRCxTQUFBO2VBQ2xELE1BQUEsQ0FBTyxPQUFPLENBQUMsYUFBUixDQUFBLENBQVAsQ0FBK0IsQ0FBQyxPQUFoQyxDQUF3QyxDQUN0QyxNQUFPLENBQUEsQ0FBQSxDQUQrQixFQUV0QyxNQUFPLENBQUEsQ0FBQSxDQUYrQixFQUd0QyxNQUFPLENBQUEsQ0FBQSxDQUgrQixFQUl0QyxNQUFPLENBQUEsQ0FBQSxDQUorQixFQUt0QyxNQUFPLENBQUEsQ0FBQSxDQUwrQixDQUF4QztNQURrRCxDQUFwRDtJQUQwQixDQUE1QjtFQXhDa0IsQ0FBcEI7QUFMQSIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUgJy4vaGVscGVycy9tYXRjaGVycydcblxuQ29sb3IgPSByZXF1aXJlICcuLi9saWIvY29sb3InXG5QYWxldHRlID0gcmVxdWlyZSAnLi4vbGliL3BhbGV0dGUnXG5cbmRlc2NyaWJlICdQYWxldHRlJywgLT5cbiAgW3BhbGV0dGUsIGNvbG9yc10gPSBbXVxuXG4gIGNyZWF0ZVZhciA9IChuYW1lLCBjb2xvciwgcGF0aCwgbGluZSkgLT5cbiAgICB7bmFtZSwgY29sb3IsIHBhdGgsIGxpbmV9XG5cbiAgYmVmb3JlRWFjaCAtPlxuICAgIGNvbG9ycyA9IFtcbiAgICAgIGNyZWF0ZVZhciAncmVkJywgbmV3IENvbG9yKCcjZmYwMDAwJyksICdmaWxlLnN0eWwnLCAwXG4gICAgICBjcmVhdGVWYXIgJ2dyZWVuJywgbmV3IENvbG9yKCcjMDBmZjAwJyksICdmaWxlLnN0eWwnLCAxXG4gICAgICBjcmVhdGVWYXIgJ2JsdWUnLCBuZXcgQ29sb3IoJyMwMDAwZmYnKSwgJ2ZpbGUuc3R5bCcsIDJcbiAgICAgIGNyZWF0ZVZhciAncmVkQ29weScsIG5ldyBDb2xvcignI2ZmMDAwMCcpLCAnZmlsZS5zdHlsJywgM1xuICAgICAgY3JlYXRlVmFyICdyZWQnLCBuZXcgQ29sb3IoJyNmZjAwMDAnKSwgJ2ZpbGUyLnN0eWwnLCAwXG4gICAgXVxuICAgIHBhbGV0dGUgPSBuZXcgUGFsZXR0ZShjb2xvcnMpXG5cbiAgZGVzY3JpYmUgJzo6Z2V0Q29sb3JzQ291bnQnLCAtPlxuICAgIGl0ICdyZXR1cm5zIHRoZSBudW1iZXIgb2YgY29sb3JzIGluIHRoZSBwYWxldHRlJywgLT5cbiAgICAgIGV4cGVjdChwYWxldHRlLmdldENvbG9yc0NvdW50KCkpLnRvRXF1YWwoNSlcblxuICBkZXNjcmliZSAnOjpnZXRDb2xvcnNOYW1lcycsIC0+XG4gICAgaXQgJ3JldHVybnMgdGhlIG5hbWVzIG9mIHRoZSBjb2xvcnMgaW4gdGhlIHBhbGV0dGUnLCAtPlxuICAgICAgZXhwZWN0KHBhbGV0dGUuZ2V0Q29sb3JzTmFtZXMoKSkudG9FcXVhbChbXG4gICAgICAgICdyZWQnXG4gICAgICAgICdncmVlbidcbiAgICAgICAgJ2JsdWUnXG4gICAgICAgICdyZWRDb3B5J1xuICAgICAgICAncmVkJ1xuICAgICAgXSlcblxuICBkZXNjcmliZSAnOjpzb3J0ZWRCeU5hbWUnLCAtPlxuICAgIGl0ICdyZXR1cm5zIHRoZSBjb2xvcnMgYW5kIG5hbWVzIHNvcnRlZCBieSBuYW1lJywgLT5cbiAgICAgIGV4cGVjdChwYWxldHRlLnNvcnRlZEJ5TmFtZSgpKS50b0VxdWFsKFtcbiAgICAgICAgY29sb3JzWzJdXG4gICAgICAgIGNvbG9yc1sxXVxuICAgICAgICBjb2xvcnNbMF1cbiAgICAgICAgY29sb3JzWzRdXG4gICAgICAgIGNvbG9yc1szXVxuICAgICAgXSlcblxuICBkZXNjcmliZSAnOjpzb3J0ZWRCeUNvbG9yJywgLT5cbiAgICBpdCAncmV0dXJucyB0aGUgY29sb3JzIGFuZCBuYW1lcyBzb3J0ZWQgYnkgY29sb3JzJywgLT5cbiAgICAgIGV4cGVjdChwYWxldHRlLnNvcnRlZEJ5Q29sb3IoKSkudG9FcXVhbChbXG4gICAgICAgIGNvbG9yc1swXVxuICAgICAgICBjb2xvcnNbM11cbiAgICAgICAgY29sb3JzWzRdXG4gICAgICAgIGNvbG9yc1sxXVxuICAgICAgICBjb2xvcnNbMl1cbiAgICAgIF0pXG4iXX0=
